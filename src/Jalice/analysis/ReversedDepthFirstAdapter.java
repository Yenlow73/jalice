/* This file was generated by SableCC (http://www.sablecc.org/). */

package Jalice.analysis;

import java.util.*;
import Jalice.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGramatica().apply(this);
        outStart(node);
    }

    public void inAGramatica(AGramatica node)
    {
        defaultIn(node);
    }

    public void outAGramatica(AGramatica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGramatica(AGramatica node)
    {
        inAGramatica(node);
        if(node.getFimprograma() != null)
        {
            node.getFimprograma().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAGramatica(node);
    }

    public void inAInteiroDeclaracao(AInteiroDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAInteiroDeclaracao(AInteiroDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroDeclaracao(AInteiroDeclaracao node)
    {
        inAInteiroDeclaracao(node);
        if(node.getPontoevirg() != null)
        {
            node.getPontoevirg().apply(this);
        }
        {
            List<PDeclnum> copy = new ArrayList<PDeclnum>(node.getDeclnum());
            Collections.reverse(copy);
            for(PDeclnum e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroDeclaracao(node);
    }

    public void inARealDeclaracao(ARealDeclaracao node)
    {
        defaultIn(node);
    }

    public void outARealDeclaracao(ARealDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealDeclaracao(ARealDeclaracao node)
    {
        inARealDeclaracao(node);
        if(node.getPontoevirg() != null)
        {
            node.getPontoevirg().apply(this);
        }
        {
            List<PDeclnum> copy = new ArrayList<PDeclnum>(node.getDeclnum());
            Collections.reverse(copy);
            for(PDeclnum e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealDeclaracao(node);
    }

    public void inADeclnum(ADeclnum node)
    {
        defaultIn(node);
    }

    public void outADeclnum(ADeclnum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclnum(ADeclnum node)
    {
        inADeclnum(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outADeclnum(node);
    }
}
