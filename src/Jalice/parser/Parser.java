/* This file was generated by SableCC (http://www.sablecc.org/). */

package Jalice.parser;

import Jalice.lexer.*;
import Jalice.node.*;
import Jalice.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGramatica node1 = (PGramatica) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAgramatica1Gramatica */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAgramatica2Gramatica */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAinteirodeclaracao1Declaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAinteirodeclaracao2Declaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AArealdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AArealdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce ADeclnum */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce ATerminal$Declnum */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, true);
            }
            break;
            case 8: /* reduce ANonTerminal$Declnum */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAgramatica1Gramatica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGramatica pgramaticaNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TFimprograma tfimprogramaNode6;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        tfimprogramaNode6 = (TFimprograma)nodeArrayList4.get(0);

        pgramaticaNode1 = new AGramatica(tprogramaNode2, tidNode3, tinicioNode4, null, tfimprogramaNode6);
        }
	nodeList.add(pgramaticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAgramatica2Gramatica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGramatica pgramaticaNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        PDeclaracao pdeclaracaoNode5;
        TFimprograma tfimprogramaNode6;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        pdeclaracaoNode5 = (PDeclaracao)nodeArrayList4.get(0);
        tfimprogramaNode6 = (TFimprograma)nodeArrayList5.get(0);

        pgramaticaNode1 = new AGramatica(tprogramaNode2, tidNode3, tinicioNode4, pdeclaracaoNode5, tfimprogramaNode6);
        }
	nodeList.add(pgramaticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAinteirodeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        TDoispontos tdoispontosNode3;
        TId tidNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TPontoevirg tpontoevirgNode6;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        tpontoevirgNode6 = (TPontoevirg)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AInteiroDeclaracao(tinteiroNode2, tdoispontosNode3, tidNode4, listNode5, tpontoevirgNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAinteirodeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        TDoispontos tdoispontosNode3;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TPontoevirg tpontoevirgNode7;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tpontoevirgNode7 = (TPontoevirg)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AInteiroDeclaracao(tinteiroNode2, tdoispontosNode3, tidNode4, listNode6, tpontoevirgNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AArealdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TReal trealNode2;
        TDoispontos tdoispontosNode3;
        TId tidNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TPontoevirg tpontoevirgNode6;
        trealNode2 = (TReal)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        tpontoevirgNode6 = (TPontoevirg)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new ARealDeclaracao(trealNode2, tdoispontosNode3, tidNode4, listNode5, tpontoevirgNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AArealdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TReal trealNode2;
        TDoispontos tdoispontosNode3;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TPontoevirg tpontoevirgNode7;
        trealNode2 = (TReal)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tpontoevirgNode7 = (TPontoevirg)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new ARealDeclaracao(trealNode2, tdoispontosNode3, tidNode4, listNode6, tpontoevirgNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADeclnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclnum pdeclnumNode1;
        {
            // Block
        TVirg tvirgNode2;
        TId tidNode3;
        tvirgNode2 = (TVirg)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdeclnumNode1 = new ADeclnum(tvirgNode2, tidNode3);
        }
	nodeList.add(pdeclnumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATerminal$Declnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclnum pdeclnumNode1;
        pdeclnumNode1 = (PDeclnum)nodeArrayList1.get(0);
	if(pdeclnumNode1 != null)
	{
	  listNode2.add(pdeclnumNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANonTerminal$Declnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclnum pdeclnumNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclnumNode2 = (PDeclnum)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclnumNode2 != null)
	{
	  listNode3.add(pdeclnumNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {7, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 3}, },
			{{-1, ERROR, 2}, {47, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {8, SHIFT, 4}, },
			{{-1, ERROR, 4}, {5, SHIFT, 5}, {6, SHIFT, 6}, {9, SHIFT, 7}, },
			{{-1, ERROR, 5}, {25, SHIFT, 9}, },
			{{-1, ERROR, 6}, {25, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 8}, {9, SHIFT, 11}, },
			{{-1, ERROR, 9}, {46, SHIFT, 12}, },
			{{-1, ERROR, 10}, {46, SHIFT, 13}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 12}, {36, SHIFT, 14}, {37, SHIFT, 15}, },
			{{-1, ERROR, 13}, {36, SHIFT, 14}, {37, SHIFT, 18}, },
			{{-1, ERROR, 14}, {46, SHIFT, 20}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 17}, {36, SHIFT, 14}, {37, SHIFT, 21}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 19}, {36, SHIFT, 14}, {37, SHIFT, 23}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 3}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, },
			{{-1, 16}, {17, 22}, {19, 22}, },
			{{-1, 17}, {13, 19}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'real', 'inteiro', 'fim.'",
			"expecting: ':'",
			"expecting: 'fim.'",
			"expecting: ',', ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 2, 6, 1, 1, 2, 7, 7, 1, 6, 7, 7, 6, 7, 7, 6, 7, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
