/* This file was generated by SableCC (http://www.sablecc.org/). */

package Jalice.node;

import java.util.*;
import Jalice.analysis.*;

@SuppressWarnings("nls")
public final class ARealDeclaracao extends PDeclaracao
{
    private TReal _real_;
    private TDoispontos _doispontos_;
    private TId _id_;
    private final LinkedList<PDeclnum> _declnum_ = new LinkedList<PDeclnum>();
    private TPontoevirg _pontoevirg_;

    public ARealDeclaracao()
    {
        // Constructor
    }

    public ARealDeclaracao(
        @SuppressWarnings("hiding") TReal _real_,
        @SuppressWarnings("hiding") TDoispontos _doispontos_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _declnum_,
        @SuppressWarnings("hiding") TPontoevirg _pontoevirg_)
    {
        // Constructor
        setReal(_real_);

        setDoispontos(_doispontos_);

        setId(_id_);

        setDeclnum(_declnum_);

        setPontoevirg(_pontoevirg_);

    }

    @Override
    public Object clone()
    {
        return new ARealDeclaracao(
            cloneNode(this._real_),
            cloneNode(this._doispontos_),
            cloneNode(this._id_),
            cloneList(this._declnum_),
            cloneNode(this._pontoevirg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARealDeclaracao(this);
    }

    public TReal getReal()
    {
        return this._real_;
    }

    public void setReal(TReal node)
    {
        if(this._real_ != null)
        {
            this._real_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._real_ = node;
    }

    public TDoispontos getDoispontos()
    {
        return this._doispontos_;
    }

    public void setDoispontos(TDoispontos node)
    {
        if(this._doispontos_ != null)
        {
            this._doispontos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doispontos_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PDeclnum> getDeclnum()
    {
        return this._declnum_;
    }

    public void setDeclnum(List<?> list)
    {
        for(PDeclnum e : this._declnum_)
        {
            e.parent(null);
        }
        this._declnum_.clear();

        for(Object obj_e : list)
        {
            PDeclnum e = (PDeclnum) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declnum_.add(e);
        }
    }

    public TPontoevirg getPontoevirg()
    {
        return this._pontoevirg_;
    }

    public void setPontoevirg(TPontoevirg node)
    {
        if(this._pontoevirg_ != null)
        {
            this._pontoevirg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoevirg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._real_)
            + toString(this._doispontos_)
            + toString(this._id_)
            + toString(this._declnum_)
            + toString(this._pontoevirg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._real_ == child)
        {
            this._real_ = null;
            return;
        }

        if(this._doispontos_ == child)
        {
            this._doispontos_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._declnum_.remove(child))
        {
            return;
        }

        if(this._pontoevirg_ == child)
        {
            this._pontoevirg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._real_ == oldChild)
        {
            setReal((TReal) newChild);
            return;
        }

        if(this._doispontos_ == oldChild)
        {
            setDoispontos((TDoispontos) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PDeclnum> i = this._declnum_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclnum) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._pontoevirg_ == oldChild)
        {
            setPontoevirg((TPontoevirg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
